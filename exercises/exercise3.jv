pipeline GoodsTransportedByTrain {

    DataExtractor
    ->GoodsTextFileInterpreter
    ->GoodsCSVInterpreter
    ->GoodsCellRangeSelector
    ->GoodsHeaderWriter
    ->GoodsHeaderRenamer
    ->GoodsTableInterpreter
    ->DatabaseLoader;

    block DataExtractor oftype HttpExtractor {
        url: "https://www-genesis.destatis.de/genesis/downloads/00/tables/46131-0014_00.csv";
    }

    block GoodsTextFileInterpreter oftype TextFileInterpreter { encoding : "latin2";}

    block GoodsCSVInterpreter oftype CSVInterpreter { 
        delimiter: ";"; 
    }

    block GoodsCellRangeSelector oftype CellRangeSelector {
    select: range A8:AU*; 
    }

    // add header for columns A-E
    block GoodsHeaderWriter oftype CellWriter {
    at: range A1:E1;
    write: ["year", "month", "goods_id", "goods_name", "goods_source"];
   }
    
    // rename header for columns AT-AU
    block GoodsHeaderRenamer oftype CellWriter {
    at: range AT1:AU1;
    write: ["abroad", "total"];
   }

    block GoodsTableInterpreter oftype TableInterpreter {
    header: true;
        columns: [
            "year" oftype PositiveIntType,
            "month" oftype MonthType,
            "goods_id" oftype GoodsIdType,
            "goods_name" oftype text,
            "goods_source" oftype text,
            "abroad" oftype PositiveIntType,
            "total" oftype PositiveIntType
        ];
    }

    block DatabaseLoader oftype SQLiteLoader { table: "goods"; file: "./goodsTransportedByTrain.sqlite"; }

    }


//set valid values for month
valuetype MonthType oftype text {
    constraints: [
        MonthConstraint
    ];
}

constraint MonthConstraint oftype AllowlistConstraint {
        allowlist: ["Januar", "Februar", "MÃ¤rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"];
    }

//set valid values for goods id
valuetype GoodsIdType oftype text {
    constraints: [
        GoodsIdConstraint
    ];
}

constraint GoodsIdConstraint oftype RegexConstraint {
    regex: /^NST7-[0-9A-Z]{3}$/;
}

valuetype PositiveIntType oftype integer {
        constraints: [ PositiveIntConstraint ];
    }

constraint PositiveIntConstraint on integer:
    value >= 0;

